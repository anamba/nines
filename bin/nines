#!/usr/bin/env ruby

require 'trollop'
require 'nines/version'

opts = Trollop::options do
  version "nines #{Nines::VERSION} (c) Aaron Namba"
  banner "nines #{Nines::VERSION} (c) Aaron Namba\nNote: Command line parameters override config file values."
  
  opt 'config-file', "Path to YAML configuration file", :short => '-f', :default => 'nines.yml'
  opt 'verbose', "Enable detailed logging", :type => :boolean
  opt 'debug', "Run each check once, then exit", :type => :boolean
  
  stop_on [ 'start', 'stop' ]
end

# absolutize config file path
opts['config-file'] = opts['config-file'] =~ /^\// ? opts['config-file'] : File.expand_path(opts['config-file'], Dir.pwd)

unless File.exists?(opts['config-file'])
  puts "Config file #{opts['config-file']} not found (or not accessible)"
  exit 1
end

# args seem okay, load up the app
require 'nines'

# instantiate Nines::App using config file
app = Nines::App.new(File.expand_path(opts['config-file']))
Nines::App.debug ||= opts['debug']
Nines::App.verbose ||= opts['verbose']

unless Nines::App.debug
  unless app.logfile_writable 
    puts "Couldn't open #{app.logfile} for logging"
    exit 1
  end
  unless app.pidfile_writable
    puts "Couldn't write pid to #{app.pidfile}"
    exit 1
  end
end

# process subcommands
cmd = ARGV.shift
case cmd
when 'start', nil
  cmd_opts = Trollop.options do
  end
  
  if app.running?
    STDERR.puts "Nines appears to be running at pid #{File.open(app.pidfile).read}, exiting."
    exit 1
  end
  
  app.start(cmd_opts)
  
when 'stop'
  cmd_opts = Trollop.options do
  end
  
  app.stop(cmd_opts)
end
